import groovy.sql.Sql

apply plugin: 'war'
apply plugin: 'groovy'
	
assert System.env.JBOSS_HOME!=null	

def sysprops=new File("${System.properties.'user.home'}/system.properties")
assert sysprops.exists()


repositories {
	mavenCentral()
	maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
}

configurations {
	jdbcdriver
}



dependencies {
	providedCompile files("$System.env.JBOSS_HOME/modules/system/layers/base/javax/inject/api/main/javax.inject-1.jar",
				          "$System.env.JBOSS_HOME/modules/system/layers/base/javax/enterprise/api/main/cdi-api-1.1.jar",
						  "$System.env.JBOSS_HOME/modules/system/layers/base/javax/validation/api/main/validation-api-1.1.0.Final.jar",
						  "$System.env.JBOSS_HOME/modules/system/layers/base/javax/ejb/api/main/jboss-ejb-api_3.2_spec-1.0.0.Final.jar",
						  "$System.env.JBOSS_HOME/modules/system/layers/base/javax/ws/rs/api/main/jaxrs-api-3.0.8.Final.jar",
						  "$System.env.JBOSS_HOME/modules/system/layers/base/javax/persistence/api/main/hibernate-jpa-2.1-api-1.0.0.Final.jar")

	jdbcdriver 'com.h2database:h2:1.3.173','org.postgresql:postgresql:9.3-1100-jdbc41'
	
	testCompile 'org.codehaus.groovy:groovy:2.0.6'
	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
	testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
	testCompile 'org.wildfly:wildfly-arquillian-container-remote:8.1.0.Final'
	testCompile 'org.jboss.arquillian:arquillian-bom:1.1.4.Final'
	testCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.1.4.Final'
}


//we need this hack to satisfy the classloader conditions for javax.sql.DriverManager
URLClassLoader loader = GroovyObject.class.classLoader
configurations.jdbcdriver.each {File file ->
	loader.addURL(file.toURI().toURL())
}
//Class.forName() is part of the above hack
println "jdbc drivers: "+Class.forName("org.h2.Driver")+", "+Class.forName("org.postgresql.Driver")


task buildId << {	
	buildDir.mkdirs()
	// generate timestamp and user for build_id
	def build_id='B'+new Date().format('yyyyMMdd HHmm ')+System.properties.'user.name'
	
	try {
		// get git status und ref
		def gitref="git rev-parse --short HEAD".execute().text.trim()
		def gittag="git describe --tags --always $gitref".execute().text.trim()
		//if(gitref!=gittag) { gitref="$gittag $gitref"}
		def gitdirty="git status --porcelain".execute().text.isEmpty()?" ":"*"
		build_id=" $gittag$gitdirty "+build_id;
	}
	catch (Exception x) {
		println "Warning: no git executable, using simple buildId"
	}
	println "buildId: $build_id"
	
	// and write build_id to file
	new File("$buildDir/build_id.txt").withWriter { out -> out.println build_id }
}


war.dependsOn buildId
war {
	metaInf { 
		from "$buildDir/build_id.txt" 
		from "$projectDir/src/main//resources/META-INF/persistence.xml"
	}
}


task deploy(dependsOn: war, type: Copy) {
	println "configure task deploy"
	
	from('build/libs/') {
		include '*.war'
	}
	into "$System.env.JBOSS_HOME"+"/standalone/deployments/"
	

	def target="${project.name}.war"
	def ok=new File("${System.env.JBOSS_HOME}/standalone/deployments/${target}.deployed");
	def nok=new File("${System.env.JBOSS_HOME}/standalone/deployments/${target}.failed");
	
	doFirst {
		println "deploy doFirst"
		if(ok.exists()) { ok.delete() }
		if(nok.exists()) { nok.delete() }
	}
	
	doLast {
		println "executing wildfly deploy..."

		def deployed=false
		for(def i=0;i<80;i++) {
			if(ok.exists()) { deployed=true; break }
			if(nok.exists()) { break }
			sleep(500);
		}
		if(deployed) { println("deploy ok.") }
		else { throw new RuntimeException("Deployment failed, see Wildfly logs!") }
	}
}

	

task loadDB(dependsOn: deploy) << {
	sysprops.withInputStream {
		System.properties.load(it)
	}
	println "connecting to database: ${System.properties.'exampleds.jdbc.url'}\nas user: ${System.properties.'exampleds.user'}"
	def sql= Sql.newInstance("${System.properties.'exampleds.jdbc.url'}",
					    "${System.properties.'exampleds.user'}",
						"${System.properties.'exampleds.password'}")
	sql.execute("insert into users (name,email) values ('mick', 'mick@test.com')")
	sql.execute("insert into users (name,email) values ('alice', 'alice@test.com')")
	sql.execute("insert into users (name,email) values ('donald', 'don@test.com')")
	sql.execute("insert into products (name) values ('Database')")
	sql.execute("insert into products (name) values ('GUI')")
	sql.execute("insert into products (name) values ('Workflow')")
	sql.execute("insert into bugs (created, description, lastchange, state, title, assignee_userid, product_productid, reporter_userid) values ('2014-05-18 09:21:25.5', 'finance needs new column totals', '2014-06-16 12:05:25.5', 'NEW', 'missing column totals', 3, 1, 2)")
	sql.execute("insert into bugs (created, description, lastchange, state, title, assignee_userid, product_productid, reporter_userid) values ('2014-05-18 10:22:15.6', 'user names should be autocompleted', '2014-06-18 09:22:15.6', 'NEW', 'autocomplete on names', 2, 2, 1)")
	sql.execute("insert into bugs (created, description, lastchange, state, title, assignee_userid, product_productid, reporter_userid) values ('2014-05-18 22:23:51.519', 'workflow steps approve and commit must be switched ', '2014-06-17 15:44:51.519', 'ASSIGNED', 'switch steps approve and commit', 1, 3, 3)")
	sql.execute("insert into bugs (created, description, lastchange, state, title, assignee_userid, product_productid, reporter_userid) values ('2014-05-18 12:24:49.507', 'table headers are missing on table sales', '2014-06-18 09:24:49.507', 'FIXED', 'show table headers', 3, 2, 2)")
	sql.close()
}



